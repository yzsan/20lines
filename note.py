"""
ファイルを作成。lsコマンドでファイルの確認（何もないこと確認）touchコマンドでファイルの作成。
touch main.py
vscode 左のラインは見なくていいのでとじる。

まずはゲームの説明を表示。printを使って。

    print("数当てゲームを始めます")
    （ターミナル）clearで綺麗にしてpython main.pyで実行。

次に答えとなる数字をまず設定。変数answerを宣言。仮に10
ユーザーが予想する数字をguessという変数を使って宣言。
ターミナルから入力する数字を入れるためにinput()
    ユーザー空の入力を受け取るやり方
        python2系:raw_input  
        python3系:input  
    guess = input() これでguessにユーザーからの入力が入ることができる。
    プログラムが終了せずにカーソルが止まったままになる。
    こうやってユーザーからの入力を受け取ることができるようになる。
        ここで注意。guessの型を表示。
        type:型を表示できる。
        print(type(guess)) > class 'str' strはstrings(文字列)型という意味。
    \\\ 実はinputで受け取る変数の型はストリングになる。文字列となる。
    answerが整数なので文字列だと比較がしづらい。だからguessを整数(int)に変換する。
    \\\ なのでユーザーから受け取ったものをintで囲ってあげるとint型に変換される。
    こうやって文字列ではなくintで比較することが後々できるので便利。

ここで入力する時の問題文、文字が全く出ていないのでわかりづらい。
    なので"あなたが入力する数字:"という入力文を表示したい。
    これはinputに引数として渡してあげれば表示される。
        guess = int(input("あなたが入力する数字:"))
    これで入力するインターフェイス、見た目がわかりやすく。
    \\\このような工夫もゲームを遊ぶ上では大切。

次にユーザーが入力した数字が合っておるのか間違っているのかその比較をしていく。
    その前に　print("答えの数の範囲は1~100です")
    いったんコメント文はコメントアウト。

次に試行回数を管理する変数triesを宣言する。
    tries = 1
    最初の試行回数は必ず１となるので１を入力した。

ユーザーが入力した数字が合っておるのか間違っているのかその検討をしていく。
    まずif文で。guess == answer
    ユーザーが予想した数字と答えが一致した場合if文の中身が実行されるという意味。
    print文では正解のメッセージ。
    わかりやすくするために正解の数字も表示できるようにしておく。
        "正解です。答えは{中括弧}" .format文を使ってanswerを渡してあげれば答の数字を表示することができる。
    もう一つ表示文を追加。最後にあなたの試行回数を表示してあげる。
        これもformat文を使って中括弧にtriesの値を渡してあげる。
        print("あなたの試行回数は{}でした".format(tries))

    次にelse文。
        予想が間違っていた場合。その表示を書いていく。ヒントを出してあげる。
        それを教えて上げないと常にランダムとなってしまう。
            if guess > answer:
                print("あなたの予想した数は答えより大きいです")
            else:
                print("あなたの予想した数は答えより小さいです")
        そしてヒントの表示が終わったらtriesの試行回数を１加算する。
            tries = tries + 1
        そしてユーザーが次の予想をするために guessの値をこうしんする必要がある。   
            guess = int(input("あなたが予想する数字:")) 9:13
        そしてguessの値が更新されるとなる。

guessの値が更新されたら、また同じことをしたいのだが、if文がこのままだと終わってしまう。
    本当のことを言うとif文の先頭に戻りたい。
    このままだとguessの値を更新してif文を抜けてしますのでプログラム自体が終了してしまう。
    もう一度繰り返したい。
    cりたいがif文だけだとこれはできない。

なのでプログラムを少し変更する必要がでてくる。
    if文の先頭に戻る工夫を考える。
    ここではプログラムを考えやすいようにif文を使って記述していたが、
    条件が適用されている限り何回も繰り返すと言う処理になってくる。
    なのである条件が満たす限り繰り返し実行したい。

if文ではなくて実はwhile文を使って書いていく。
    whileの中の条件文が常にTrueの場合は、whileの中身が実行され続ける。
    Trueの時はずーーと実行される。無限に実行される。
    なので条件文を工夫する必要があって、間違っている限りどんどん入力したいので
    guessがnotイコールanswerの場合
        while guess !=answer:
    と言うふうな条件指定をしておく。
    ユーザーの予想が間違っている限り、このwhile文の中身を実行指定きたい。

なので先ほどif文で書いた間違った時の処理をwhile文の中に書いていきたい。
    # 予想が外れている限り、whileの中身を実行する
    もしguessがanswerと同じになったらwhile文の中身は実行されずに、while文の中身の外が実行される。
    つまりwhile文の次に書いたところが実行されるのでこの書き方で大丈夫。
        if文の時に間違っていた処理を書いていたのでこれをコピー
         
            while guess !=answer: # !=(ノットイコール)比較演算子:snake2で確認
                if guess > answer:
                    print("あなたの予想した数は答えより大きいです")
                else:
                    print("あなたの予想した数は答えより小さいです")

                tries = tries + 1
                guess = int(input("あなたが予想する数字:"))

        これでやりたいことが実現できる。
    そしてもしユーザーの予想が合っている場合、正解だった場合
    予想が合ってしたらwhile文の次が実行されるので、先ほどif文で書いた次を表示したい。

            print("正解です。答えは{}".format(answer))
            print("あなたの試行回数は{}でした".format(tries))

これでゲーム自体はほぼほぼ完成。たった20行。
Pythonは中括弧は消してインデントで管理。

今答えが固定担っている。なのでランダムで設定指定きたい。
    １行目にランダムを使うために import random ランダム・ライブラリをインポート。
    これでランダム・ライブラリが使える。
        answer = random.randrange(start=1, stop=100)
        randrangeランドレンジを使って、乱数の範囲を設定して、
        指定した範囲内の乱数を取得する。
        randrange関数には　start　と　stop　という引数があって
        startは小さい値、stopは大きい値を入力することで、この範囲内の乱数を生成することができる。

これでプログラムの完成。   

実際に簡単なゲームでも自分で一から作ってみると割と勉強になったりする。
今回のポイントはif文ではなくwhile文を使うところ。
while文を使うといろいろターミナルで遊べるゲームを作ることができる。

"""

    

